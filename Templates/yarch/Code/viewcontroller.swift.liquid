//
//  {{ module_info.name }}.swift
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ date.year }} Putkov Dimi. All rights reserved.
//

import UIKit

protocol {{ module_info.name }}DisplayLogic: class {
	func displaySomething(viewModel: {{ module_info.name }}.Something.ViewModel)
}

final class {{ module_info.name }}ViewController: UIViewController {
	private let interactor: {{ module_info.name }}Interactor
	private var state: {{ module_info.name }}.ViewControllerState

	init(interactor: {{ module_info.name }}Interactor, initialState: {{ module_info.name }}.ViewControllerState = .loading) {
		self.interactor = interactor
		self.state = initialState
		super.init(nibName: nil, bundle: nil)
	}

	required init?(coder aDecoder: NSCoder) {
		fatalError("init(coder:) has not been implemented")
	}

	// MARK: View lifecycle
	override func loadView() {
		let view = {{ module_info.name }}View(frame: UIScreen.main.bounds)
		self.view = view
		// make additional setup of view or save references to subviews
	}

	override func viewDidLoad() {
		super.viewDidLoad()
		doSomething()
	}

	// MARK: Do something
	func doSomething() {
		let request = {{ module_info.name }}.Something.Request()
		interactor.doSomething(request: request)
	}
}

extension {{ module_info.name }}ViewController: {{ module_info.name }}DisplayLogic {
	func displaySomething(viewModel: {{ module_info.name }}.Something.ViewModel) {
		state = viewModel.state
		switch state {
		case .loading:
			print("loading...")
		case let .error(message):
			print("error \(message)")
		case let .result(items):
			print("result: \(items)")
		case .emptyResult:
			print("empty result")
		}
	}
}
